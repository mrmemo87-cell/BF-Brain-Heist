// src/pages/LoginPage.tsx
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useMutation } from '@tanstack/react-query';
import { motion } from 'framer-motion';

import { Button } from '../components/ui/Button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/Card';
import { Input } from '../components/ui/Input';
import { Label } from '../components/ui/Label';

import { supa } from '../src/SupabaseClient';
import { useAuthStore } from '../store/authStore';
import { useToasts } from '../store/toastStore';

const LoginPage: React.FC = () => {
  const nav = useNavigate();
  const setToken = useAuthStore((s) => s.setToken);
  const { showError } = useToasts();

  const [mode, setMode] = useState<'login' | 'signup'>('login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // Handle Google/OAuth return (?code=...) and also fast-path if already logged in
  useEffect(() => {
    (async () => {
      try {
        const url = new URL(window.location.href);
        const code = url.searchParams.get('code');

        if (code) {
          const { data, error } = await supa.auth.exchangeCodeForSession({ code });
          if (error) throw error;
          setToken?.(data.session?.access_token || '');
          // clean the URL
          url.searchParams.delete('code');
          url.searchParams.delete('state');
          url.searchParams.delete('type');
          history.replaceState({}, '', url.pathname + (url.searchParams.toString() ? '?' + url.searchParams.toString() : ''));
          nav('/profile', { replace: true });
          return;
        }

        // already logged in?
        const { data: sess } = await supa.auth.getSession();
        if (sess.session?.access_token) {
          setToken?.(sess.session.access_token);
          nav('/profile', { replace: true });
        }
      } catch (e: any) {
        // don't block UI if exchange fails (e.g., came without a code)
        console.warn('Auth init/exchange error:', e?.message || e);
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Email + password (login)
  const loginPw = useMutation({
    mutationFn: async () => {
      const { data, error } = await supa.auth.signInWithPassword({ email, password });
      if (error) throw error;
      setToken?.(data.session?.access_token || '');
      return data;
    },
    onSuccess: () => nav('/profile', { replace: true }),
    onError: (e: any) => showError('Login failed', e?.message || 'Could not sign in'),
  });

  // Email + password (sign up)
  const signupPw = useMutation({
    mutationFn: async () => {
      const { data, error } = await supa.auth.signUp({ email, password });
      if (error) throw error;
      // If your project requires email confirmation, session may be null here.
      if (data.session?.access_token) {
        setToken?.(data.session.access_token);
      }
      return data;
    },
    onSuccess: () => {
      // If email confirmation is ON in Supabase, user may need to confirm before being "in".
      nav('/profile', { replace: true });
    },
    onError: (e: any) => showError('Sign up failed', e?.message || 'Could not create account'),
  });

  // Google OAuth (uses Supabase Site URL as redirect)
  const google = useMutation({
    mutationFn: async () => {
      const { error } = await supa.auth.signInWithOAuth({ provider: 'google' });
      if (error) throw error;
      // Browser will redirect to Google; on return, the useEffect above will exchange the code.
    },
    onError: (e: any) => showError('Google sign-in failed', e?.message || 'Could not start Google auth'),
  });

  const pending = loginPw.isPending || signupPw.isPending || google.isPending;

  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (mode === 'login') loginPw.mutate();
    else signupPw.mutate();
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-8rem)] px-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.94 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.35 }}
        className="w-full max-w-sm"
      >
        <Card className="mx-auto shadow-[var(--glow-accent)]">
          <CardHeader className="text-center">
            <CardTitle className="font-heading text-2xl">Welcome, Agent</CardTitle>
            <CardDescription>
              {mode === 'login' ? 'Your next operation awaits.' : 'Create your operative identity.'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <Button
                type="button"
                variant="secondary"
                className="w-full"
                disabled={pending}
                onClick={() => google.mutate()}
              >
                {google.isPending ? 'Opening Google…' : 'Continue with Google'}
              </Button>

              <div className="text-center text-xs opacity-60">or</div>

              <form onSubmit={onSubmit} className="space-y-3">
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="you@school.edu"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                    disabled={pending}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password">Password</Label>
                  <Input
                    id="password"
                    type="password"
                    placeholder="Secret key"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    disabled={pending}
                  />
                </div>

                <Button type="submit" className="w-full" disabled={pending}>
                  {mode === 'login'
                    ? (loginPw.isPending ? 'Connecting…' : 'Enter the Heist')
                    : (signupPw.isPending ? 'Creating…' : 'Create Account')}
                </Button>
              </form>

              <div className="text-xs text-center opacity-80 mt-2">
                {mode === 'login' ? (
                  <>
                    New here?{' '}
                    <button
                      type="button"
                      className="underline underline-offset-4"
                      onClick={() => setMode('signup')}
                      disabled={pending}
                    >
                      Create an account
                    </button>
                  </>
                ) : (
                  <>
                    Already have an account?{' '}
                    <button
                      type="button"
                      className="underline underline-offset-4"
                      onClick={() => setMode('login')}
                      disabled={pending}
                    >
                      Sign in
                    </button>
                  </>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};

export default LoginPage;
